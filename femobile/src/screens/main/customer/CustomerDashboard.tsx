import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Dimensions,
  RefreshControl,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { Button } from '../../../components';
import { useAuth, useEnsureValidToken } from '../../../hooks';
import { useStaticData } from '../../../hooks/useStaticData';
import { COLORS, UI } from '../../../constants';
import type { CustomerData } from '../../../types/auth';
import { 
  customerDashboardService, 
  type CustomerDashboardStats, 
  type UpcomingBooking,
  type RecentBooking
} from '../../../services';

const { width } = Dimensions.get('window');

export const CustomerDashboard: React.FC = () => {
  const { user, logout, loading } = useAuth();
  const { data: staticData } = useStaticData('customer-dashboard');
  const { ensureValidToken } = useEnsureValidToken();
  const [refreshing, setRefreshing] = useState(false);
  const [dashboardLoading, setDashboardLoading] = useState(true);
  const [stats, setStats] = useState<CustomerDashboardStats>({
    upcomingAppointments: 0,
    completedJobs: 0,
    totalSpent: 0,
    membershipLevel: 'Bronze',
    loyaltyPoints: 0,
    thisMonthBookings: 0,
    favoriteServices: [],
    averageRating: 0
  });
  const [upcomingBookings, setUpcomingBookings] = useState<UpcomingBooking[]>([]);
  const [recentBookings, setRecentBookings] = useState<RecentBooking[]>([]);

  const customer = user as CustomerData;

  // Load dashboard data with mock data
  const loadDashboardData = useCallback(async () => {
    try {
      setDashboardLoading(true);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Mock data for demonstration
      const mockStats: CustomerDashboardStats = {
        upcomingAppointments: 2,
        completedJobs: 15,
        totalSpent: 2500000,
        membershipLevel: 'Gold',
        loyaltyPoints: 1250,
        thisMonthBookings: 3,
        favoriteServices: ['T·ªïng v·ªá sinh', 'D·ªçn nh√† ƒë·ªãnh k·ª≥'],
        averageRating: 4.8
      };

      const mockUpcomingBookings: UpcomingBooking[] = [
        {
          bookingId: 'BK001',
          serviceName: 'T·ªïng v·ªá sinh',
          appointmentDate: '2025-10-08',
          appointmentTime: '09:00',
          employeeName: 'Nguy·ªÖn Th·ªã Lan',
          status: 'confirmed',
          address: '123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 1, TP.HCM'
        },
        {
          bookingId: 'BK002', 
          serviceName: 'D·ªçn nh√† ƒë·ªãnh k·ª≥',
          appointmentDate: '2025-10-12',
          appointmentTime: '14:00',
          employeeName: 'Tr·∫ßn VƒÉn Nam',
          status: 'pending',
          address: '456 L√™ VƒÉn S·ªπ, Qu·∫≠n 3, TP.HCM'
        }
      ];

      const mockRecentBookings: RecentBooking[] = [
        {
          bookingId: 'BK003',
          serviceName: 'V·ªá sinh sofa',
          completedDate: '2025-10-02',
          rating: 5,
          amount: 450000,
          employeeName: 'L√™ Th·ªã Hoa',
          feedback: 'D·ªãch v·ª• r·∫•t t·ªët, nh√¢n vi√™n chuy√™n nghi·ªáp!'
        },
        {
          bookingId: 'BK004',
          serviceName: 'T·ªïng v·ªá sinh',
          completedDate: '2025-09-28',
          rating: 4,
          amount: 800000,
          employeeName: 'Ph·∫°m VƒÉn ƒê·ª©c'
        },
        {
          bookingId: 'BK005',
          serviceName: 'Gi·∫∑t th·∫£m',
          completedDate: '2025-09-25',
          rating: 5,
          amount: 350000,
          employeeName: 'V√µ Th·ªã Mai',
          feedback: 'Th·∫£m s·∫°ch nh∆∞ m·ªõi!'
        }
      ];

      setStats(mockStats);
      setUpcomingBookings(mockUpcomingBookings);
      setRecentBookings(mockRecentBookings);
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard');
    } finally {
      setDashboardLoading(false);
    }
  }, []);

  // Load data on mount
  useEffect(() => {
    loadDashboardData();
  }, [loadDashboardData]);

  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const getUserDisplayName = () => {
    if (!customer) return 'Customer';
    return customer.fullName || customer.username || 'Customer';
  };

  // Example of how to use token validation before making API calls
  const handleApiCall = async (apiFunction: () => Promise<any>) => {
    try {
      // Ensure we have a valid token before making the API call
      const hasValidToken = await ensureValidToken();
      
      if (!hasValidToken) {
        Alert.alert(
          staticData?.messages?.error || 'L·ªói',
          'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
          [{ text: 'OK' }]
        );
        return;
      }

      // Proceed with API call if token is valid
      await apiFunction();
    } catch (error) {
      console.warn('API call failed:', error);
      Alert.alert(
        staticData?.messages?.error || 'L·ªói',
        'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.',
        [{ text: 'OK' }]
      );
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await loadDashboardData();
    setRefreshing(false);
  };

  if (!staticData) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text>Loading...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <TouchableOpacity onPress={handleRefresh}>
            <Text>{refreshing ? 'Refreshing...' : ''}</Text>
          </TouchableOpacity>
        }
      >
        {/* Header with Gradient - No logout button */}
        <LinearGradient
          colors={[COLORS.primary, '#6B73FF'] as [string, string]}
          style={styles.headerGradient}
        >
          <View style={styles.header}>
            <View style={styles.welcomeContainer}>
              <Text style={styles.greetingText}>
                Ch√†o m·ª´ng, {getUserDisplayName()}! üëã
              </Text>
              <Text style={styles.subtitleText}>
                {customer?.email ? `üìß ${customer.email}` : 'Kh√°ch h√†ng th√¢n thi·∫øt'}
              </Text>
              <Text style={styles.welcomeMessage}>
                C·∫•p th√†nh vi√™n: {stats.membershipLevel} ‚Ä¢ ƒêi·ªÉm t√≠ch l≈©y: {stats.loyaltyPoints}
              </Text>
              {customer?.phoneNumber && (
                <Text style={styles.userInfoText}>
                  üì± {customer.phoneNumber}
                </Text>
              )}
            </View>
          </View>

          {/* Customer Stats */}
          <View style={styles.statsContainer}>
            <View style={styles.statCard}>
              <Ionicons name="calendar-outline" size={20} color={COLORS.surface} />
              <Text style={styles.statNumber}>{stats.upcomingAppointments}</Text>
              <Text style={styles.statLabel}>L·ªãch h·∫πn</Text>
            </View>
            <View style={styles.statCard}>
              <Ionicons name="checkmark-circle" size={20} color={COLORS.surface} />
              <Text style={styles.statNumber}>{stats.completedJobs}</Text>
              <Text style={styles.statLabel}>Ho√†n th√†nh</Text>
            </View>
            <View style={styles.statCard}>
              <Ionicons name="star-outline" size={20} color={COLORS.surface} />
              <Text style={styles.statNumber}>{stats.loyaltyPoints}</Text>
              <Text style={styles.statLabel}>ƒêi·ªÉm th∆∞·ªüng</Text>
            </View>
          </View>
        </LinearGradient>

        {/* Quick Actions */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‚ö° Thao t√°c nhanh</Text>
          <View style={styles.quickActionsContainer}>
            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={() => console.log('Book service')}
            >
              <Ionicons name="calendar-clear" size={24} color={COLORS.primary} />
              <Text style={styles.quickActionTitle}>ƒê·∫∑t l·ªãch</Text>
              <Text style={styles.quickActionDesc}>ƒê·∫∑t d·ªãch v·ª• m·ªõi</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={() => console.log('View history')}
            >
              <Ionicons name="time-outline" size={24} color={COLORS.secondary} />
              <Text style={styles.quickActionTitle}>L·ªãch s·ª≠</Text>
              <Text style={styles.quickActionDesc}>Xem ƒë∆°n h√†ng</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={() => console.log('Support')}
            >
              <Ionicons name="chatbubbles-outline" size={24} color={COLORS.accent} />
              <Text style={styles.quickActionTitle}>H·ªó tr·ª£</Text>
              <Text style={styles.quickActionDesc}>Li√™n h·ªá admin</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={() => console.log('Promotions')}
            >
              <Ionicons name="gift-outline" size={24} color="#E91E63" />
              <Text style={styles.quickActionTitle}>∆Øu ƒë√£i</Text>
              <Text style={styles.quickActionDesc}>Khuy·∫øn m√£i</Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Services Categories */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üè† D·ªãch v·ª• ph·ªï bi·∫øn</Text>
          <View style={styles.servicesGrid}>
            <TouchableOpacity
              style={styles.serviceCard}
              onPress={() => console.log('House cleaning')}
            >
              <LinearGradient
                colors={['#E8F5E8', '#C8E6C9']}
                style={styles.serviceCardGradient}
              >
                <Ionicons name="home-outline" size={28} color={COLORS.primary} />
                <Text style={styles.serviceTitle}>D·ªçn d·∫πp nh√†</Text>
                <Text style={styles.servicePrice}>t·ª´ 150k/h</Text>
              </LinearGradient>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.serviceCard}
              onPress={() => console.log('Laundry')}
            >
              <LinearGradient
                colors={['#E3F2FD', '#BBDEFB']}
                style={styles.serviceCardGradient}
              >
                <Ionicons name="shirt-outline" size={28} color={COLORS.secondary} />
                <Text style={styles.serviceTitle}>Gi·∫∑t ·ªßi</Text>
                <Text style={styles.servicePrice}>t·ª´ 20k/kg</Text>
              </LinearGradient>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.serviceCard}
              onPress={() => console.log('Cooking')}
            >
              <LinearGradient
                colors={['#FFF3E0', '#FFE0B2']}
                style={styles.serviceCardGradient}
              >
                <Ionicons name="restaurant-outline" size={28} color={COLORS.accent} />
                <Text style={styles.serviceTitle}>N·∫•u ƒÉn</Text>
                <Text style={styles.servicePrice}>t·ª´ 100k/b·ªØa</Text>
              </LinearGradient>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.serviceCard}
              onPress={() => console.log('Garden care')}
            >
              <LinearGradient
                colors={['#F3E5F5', '#E1BEE7']}
                style={styles.serviceCardGradient}
              >
                <Ionicons name="flower-outline" size={28} color="#9C27B0" />
                <Text style={styles.serviceTitle}>ChƒÉm s√≥c v∆∞·ªùn</Text>
                <Text style={styles.servicePrice}>t·ª´ 200k/l·∫ßn</Text>
              </LinearGradient>
            </TouchableOpacity>
          </View>
        </View>

        {/* Recent Activity */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üìã Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</Text>
          <View style={styles.activityContainer}>
            <View style={styles.activityItem}>
              <View style={styles.activityIcon}>
                <Ionicons name="checkmark-circle" size={20} color={COLORS.success} />
              </View>
              <View style={styles.activityDetails}>
                <Text style={styles.activityTitle}>D·ªçn d·∫πp nh√† ho√†n th√†nh</Text>
                <Text style={styles.activityTime}>2 gi·ªù tr∆∞·ªõc</Text>
              </View>
            </View>

            <View style={styles.activityItem}>
              <View style={styles.activityIcon}>
                <Ionicons name="time-outline" size={20} color={COLORS.warning} />
              </View>
              <View style={styles.activityDetails}>
                <Text style={styles.activityTitle}>L·ªãch h·∫πn gi·∫∑t ·ªßi s·∫Øp t·ªõi</Text>
                <Text style={styles.activityTime}>Ng√†y mai, 9:00 AM</Text>
              </View>
            </View>

            <View style={styles.activityItem}>
              <View style={styles.activityIcon}>
                <Ionicons name="star" size={20} color={COLORS.accent} />
              </View>
              <View style={styles.activityDetails}>
                <Text style={styles.activityTitle}>ƒê√°nh gi√° ƒë√£ g·ª≠i</Text>
                <Text style={styles.activityTime}>1 ng√†y tr∆∞·ªõc</Text>
              </View>
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollContent: {
    flexGrow: 1,
  },
  headerGradient: {
    paddingTop: 20,
    paddingHorizontal: 20,
    paddingBottom: 30,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 20,
  },
  welcomeContainer: {
    flex: 1,
  },
  greetingText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.surface,
    marginBottom: 4,
  },
  subtitleText: {
    fontSize: 16,
    color: COLORS.surface,
    opacity: 0.9,
    marginBottom: 8,
  },
  welcomeMessage: {
    fontSize: 14,
    color: COLORS.surface,
    opacity: 0.8,
  },
  userInfoText: {
    fontSize: 13,
    color: COLORS.surface,
    opacity: 0.9,
    marginTop: 4,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statCard: {
    flex: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 12,
    padding: 16,
    marginHorizontal: 4,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.surface,
    marginTop: 8,
  },
  statLabel: {
    fontSize: 12,
    color: COLORS.surface,
    opacity: 0.9,
    marginTop: 4,
  },
  section: {
    marginHorizontal: 20,
    marginTop: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.text.primary,
    marginBottom: 16,
  },
  quickActionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  quickActionCard: {
    width: (width - 60) / 2,
    backgroundColor: COLORS.surface,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    alignItems: 'center',
    ...UI.SHADOW.medium,
  },
  quickActionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginTop: 12,
  },
  quickActionDesc: {
    fontSize: 12,
    color: COLORS.text.secondary,
    marginTop: 4,
    textAlign: 'center',
  },
  servicesGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  serviceCard: {
    width: (width - 60) / 2,
    marginBottom: 16,
    borderRadius: 16,
    overflow: 'hidden',
    ...UI.SHADOW.small,
  },
  serviceCardGradient: {
    padding: 20,
    alignItems: 'center',
    minHeight: 120,
    justifyContent: 'center',
  },
  serviceTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginTop: 12,
    textAlign: 'center',
  },
  servicePrice: {
    fontSize: 12,
    color: COLORS.text.secondary,
    marginTop: 4,
    textAlign: 'center',
  },
  activityContainer: {
    backgroundColor: COLORS.surface,
    borderRadius: 16,
    padding: 16,
    ...UI.SHADOW.small,
  },
  activityItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  activityIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.background,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  activityDetails: {
    flex: 1,
  },
  activityTitle: {
    fontSize: 14,
    fontWeight: '500',
    color: COLORS.text.primary,
    marginBottom: 2,
  },
  activityTime: {
    fontSize: 12,
    color: COLORS.text.secondary,
  },
});